from config import key
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import os, re, sqlite3, random, asyncio
from Pillow import photo_to_gif_with_duck

# SELENIUM
options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")
# options.add_argument("--headless")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option('useAutomationExtension', False)

bot = Bot(key)
dp = Dispatcher(bot)


def markups(**kwargs):
    buttons_l = []
    for key, value in kwargs.items():
        buttons_l.append(InlineKeyboardButton(value, callback_data=key))
    buttons = []
    count = 0
    for i in buttons_l:
        if count == len(buttons_l):
            break
        if count + 1 == len(buttons_l):
            buttons.append([buttons_l[count]])
            break
        buttons.append([buttons_l[count], buttons_l[count + 1]])
        count += 2
    return InlineKeyboardMarkup(inline_keyboard=buttons)


alk = ['üçπ', 'üç∏', 'ü•É', 'üç∑']
bar_dict = { 'home': '–î–æ–º–∞—à–Ω–∏–π —Å–ª–∏–Ω–≥', 'bianko': '–ë—å—è–Ω–∫–æ –±—Ä–∏–∑', 'rhino': '–†–æ–∑–æ–≤—ã–π –Ω–æ—Å–æ—Ä–æ–≥', 'smash': '–¢–µ–∫–∏–ª–∞ —Å–º—ç—à', 'negr': '–ù–µ–≥—Ä–æ–Ω–∏', 'daiq': '–î–∞–π–∫–∏—Ä–∏', 'long': '–õ–æ–Ω–≥ –∞–π–ª–µ–Ω–¥ –∞–π—Å —Ç–∏', 'cosmo': '–ö–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω',
            'sky': '–ù–µ–±–µ—Å–∞',
            'snake': '–ì—Ä–µ–º—É—á–∞—è –∑–º–µ—è', 'marg': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'sex': '–°–µ–∫—Å –Ω–∞ –ø–ª—è–∂–µ', 'lagoon': '–ì–æ–ª—É–±–∞—è –ª–∞–≥—É–Ω–∞',
            'b52': '–ë-52', 'maj': '–ú–∞–π —Ç–∞–π',
            'green': '–ó–µ–ª–µ–Ω–∞—è —Ñ–µ—è', 'manh': '–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω', 'ws': '–í–∏—Å–∫–∏ —Å–∞—É—ç—Ä', 'hiro': '–•–∏—Ä–æ—Å–∏–º–∞',
            'espresso': '–≠—Å–ø—Ä–µ—Å—Å–æ –º–∞—Ä—Ç–∏–Ω–∏', 'paloma': '–ü–∞–ª–æ–º–∞', 'obl': '–û–±–ª–∞–∫–∞', 'ledi': '–ë–µ–ª–∞—è –ª–µ–¥–∏',
            'bum': '–¢–µ–∫–∏–ª–∞ –±—É–º', 'spritz': '–ê–ø–µ—Ä–æ–ª—å –®–ø—Ä–∏—Ü', 'mimoza': '–ú–∏–º–æ–∑–∞', 'sosok': '–°–∫–æ–ª—å–∑–∫–∏–π —Å–æ—Å–æ–∫',
            'blur': '–û–±–ª–∞–∫–æ –¥—ã–º–∞', 'kiss': '–ü–æ—Ü–µ–ª—É–π –¥—å—è–≤–æ–ª–∞', 'blackrus': '–ß–µ—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π', 'martin': '–í–æ–¥–∫–∞ –º–∞—Ä—Ç–∏–Ω–∏',
            'vodkared': '–í–æ–¥–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫', 'moh': '–ú–æ—Ö–∏—Ç–æ', 'rose': '–†–æ–∑–æ–≤—ã–π —Å–∞–¥', 'basil': '–ë–∞–∑–∏–ª–∏–∫–æ–≤—ã–π —É–¥–∞—Ä',
            'french': '–§—Ä–µ–Ω—á 75', 'breeze': '–õ–µ—Ç–Ω–∏–π –±—Ä–∏–∑', 'cocumber': '–î–∂–∏–Ω —Ç–æ–Ω–∏–∫ —Å –æ–≥—É—Ä—Ü–æ–º', 'juce': '–û—Ç–≤–µ—Ä—Ç–∫–∞',
            'orgasm': '–ú–æ–¥–Ω—ã–π –æ—Ä–≥–∞–∑–º', 'sunrise': '–¢–µ–∫–∏–ª–∞ —Å–∞–Ω—Ä–∞–π–∑', 'bell': '–ë–µ–ª–ª–∏–Ω–∏', 'shmel': '–®–º–µ–ª—å',
            'gott': '–ö–∞—Ä–µ–ª –ì–æ—Ç—Ç', 'tonic': '–î–∂–∏–Ω —Ç–æ–Ω–∏–∫', 'whiskey': '–í–∏—Å–∫–∏ –∫–æ–ª–∞', 'sling': '–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π —Å–ª–∏–Ω–≥',
            'pina': '–ü–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', 'tom': '–¢–æ–º –∏ –î–∂–µ—Ä—Ä–∏', 'brendi': '–ë—Ä–µ–Ω–¥–∏ –∏ –∫–æ–ª–∞', 'amigo': '–ê–º–∏–≥–æ', 'fors': '–§–æ—Ä—Å–∞–∂',
            'lolita': '–õ–æ–ª–∏—Ç–∞', 'vegan': '–î–µ–º–æ–Ω-–≤–µ–≥–∞–Ω',
            'cherry': '–ó–∏–º–Ω—è—è –≤–∏—à–Ω—è', 'flam': '–†–æ—è–ª —Ñ–ª–∞–º–±–µ', 'barbi': '–ë–∞—Ä–±–∏', 'baunty': '–ë–∞—É–Ω—Ç–∏ –º–∞—Ä—Ç–∏–Ω–∏',
            'porn': '–ü–æ—Ä–Ω–æ–∑–≤–µ–∑–¥–∞', 'dno': '–ó–æ–ª–æ—Ç–æ–µ –¥–Ω–æ', 'shashki': '–ê–ª–∫–æ-—à–∞—à–∫–∏', 'bojar': '–ë–æ—è—Ä—Å–∫–∏–π',
            'bojar2': '–î–æ—á—å –ë–æ—è—Ä—Å–∫–æ–≥–æ', 'blood': '–ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏', 'reddog': '–ö—Ä–∞—Å–Ω—ã–π –ø–µ—Å', 'dog': '–°–æ–±–∞–∫–∞.—Ä—É',
            'reanimator': '–†–µ–∞–Ω–∏–º–∞—Ç–æ—Ä', 'controlshot': '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª', 'oyster': '–£—Å—Ç—Ä–∏—á–Ω—ã–π —à—É—Ç–µ—Ä',
            'devil': '–¢–µ—Å—Å–º–∞–Ω—Å–∫–∏–π –¥—å—è–≤–æ–ª', 'aurora': '–°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ', 'belrus': '–ë–µ–ª—ã–π —Ä—É—Å—Å–∫–∏–π'}


async def coc(name, call):
    user_id = call.from_user.id
    ranalk = random.choice(alk)
    if name == '–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω':
        await bot.send_photo(call.message.chat.id, open('bar/godzilla.jpg', 'rb'))
        await asyncio.sleep(1)
    elif name == '–ë–µ–ª—ã–π —Ä—É—Å—Å–∫–∏–π':
        await bot.send_photo(call.message.chat.id, open('bar/lebo.jpg', 'rb'))
        await asyncio.sleep(1.5)
        await bot.send_message(call.message.chat.id, random.choice(
            ['"–¢–æ–ª—å–∫–æ –≤–¥—Ä—É–≥ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–∞–∫–∞—è-—Ç–æ –º—Ä–∞–∑—å –∏ —Å—Å—ã—Ç –Ω–∞ —Ç–≤–æ–π –∫–æ–≤–µ—Ä."', '"–ì–¥–µ –¥–µ–Ω—å–≥–∏, –õ–µ–±–æ–≤—Å–∫–∏?"',
             '"–Ø —Ç–µ–±—è –ª—é–±–ª—é, –£–æ–ª—Ç–µ—Ä, –Ω–æ —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã ‚Äî –¥–µ–±–∏–ª."',
             '"–°–ª—ã—à—å, –ß—É–≤–∞–∫! –ê –≥–¥–µ —Ç–≤–æ—è —Ç–∞—á–∫–∞?"', '"–ö–æ–≤—ë—Ä –∑–∞–¥–∞–≤–∞–ª —Å—Ç–∏–ª—å –≤—Å–µ–π –∫–æ–º–Ω–∞—Ç–µ."',
             '"–°–º–æ–∫–∏, —Ç—É—Ç –Ω–µ –í—å–µ—Ç–Ω–∞–º. –≠—Ç–æ ‚Äî –±–æ—É–ª–∏–Ω–≥. –ó–¥–µ—Å—å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞."',
             '"–ë—ã–≤–∞–µ—Ç, —Ç—ã –µ—à—å –º–µ–¥–≤–µ–¥—è, –∞ –±—ã–≤–∞–µ—Ç, –º–µ–¥–≤–µ–¥—å —Ç–µ–±—è."',
             '"–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –ø–ª–∞–Ω, –£–æ–ª—Ç–µ—Ä. –ü—Ä–æ—Å—Ç–æ –æ—Ö—É–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª. –ù–∞–¥—ë–∂–Ω—ã–π, –±–ª—è–¥—å, –∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã."']))
        await asyncio.sleep(1.5)
    rec_name = await bot.send_message(call.message.chat.id, f'<b>{name.upper()}</b> (<em>–ó–∞–≥—Ä—É–∑–∫–∞</em>)',
                                      parse_mode='HTML')
    try:
        driver = drivers_dict[user_id]
        driver.refresh()
    except:
        drivers_dict[user_id] = webdriver.Chrome(options=options)
        driver = drivers_dict[user_id]
    await bot.edit_message_text(f'<b>{name.upper()}</b> (<em>–ó–∞–≥—Ä—É–∑–∫–∞: </em>{ranalk})', call.message.chat.id,
                                rec_name.message_id, parse_mode='HTML')
    driver.get(f'https://ru.inshaker.com/cocktails')
    await bot.edit_message_text(f'<b>{name.upper()}</b> (<em>–ó–∞–≥—Ä—É–∑–∫–∞: </em>{ranalk * 2})', call.message.chat.id,
                                rec_name.message_id, parse_mode='HTML')
    driver.find_element(By.CLASS_NAME, 'search-input').send_keys(name)
    await asyncio.sleep(1.2)
    driver.find_element(By.CLASS_NAME, 'search-input').submit()
    await asyncio.sleep(1)
    elem = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.LINK_TEXT, name)))
    icons_list = []

    icons = driver.find_element(By.CLASS_NAME, 'cocktail-item-goods').find_elements(By.TAG_NAME, 'img')
    for i in icons:
        icons_list.append(i.get_attribute('src'))
        if len(icons_list) == 10:
            break
    driver.get(elem.get_attribute('href'))
    await bot.edit_message_text(f'<b>{name.upper()}</b> (<em>–ó–∞–≥—Ä—É–∑–∫–∞: </em>{ranalk * 3})', call.message.chat.id,
                                rec_name.message_id, parse_mode='HTML')
    rec_list = driver.find_element(By.CLASS_NAME, 'steps').find_elements(By.TAG_NAME, 'li')
    img = driver.find_element(By.CLASS_NAME, 'image').get_attribute('src')
    await asyncio.sleep(1)
    await bot.edit_message_text(f'<b>{name.upper()}</b>', call.message.chat.id, rec_name.message_id, parse_mode='HTML')
    ing_list = [i.text.replace('\n', ' ') for i in
                driver.find_element(By.TAG_NAME, 'table').find_elements(By.TAG_NAME, 'tr')][1:]
    ing_list = str(ing_list).strip('[]').replace("'", "")
    await bot.send_message(call.message.chat.id, f'–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ing_list}')
    media = types.MediaGroup()
    for i in icons_list:
        media.attach_photo(types.InputMediaPhoto(i))
    await asyncio.sleep(1)
    await bot.send_media_group(call.message.chat.id, media)
    await asyncio.sleep(1)
    for i in rec_list:
        await bot.send_message(call.message.chat.id, f'‚öúÔ∏è {i.text}')
        await asyncio.sleep(1)
    await bot.send_photo(call.message.chat.id, img, f'"–û–ø–ª—è"! ‚Äî  <b>"{name}</b>"', reply_markup=markups(bar='üîô'),
                         parse_mode='HTML')
    try:
        warning[user_id] += 1
    except:
        warning[user_id] = 1

    async def danger(n):
        await asyncio.sleep(2)
        await bot.send_message(call.message.chat.id, '‚ò†Ô∏è')
        await asyncio.sleep(2)
        await bot.send_message(call.message.chat.id, f'–≠—Ç–æ —Ç–≤–æ–π {n}-–π –∫–æ–∫—Ç–µ–π–ª—å!')
        await asyncio.sleep(1)
        await bot.send_message(call.message.chat.id, '–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–µ–¥—ë—Ç –∫...')
        await asyncio.sleep(1)
        await bot.send_photo(call.message.chat.id, open('bar/warning.jpg', 'rb'))
        await asyncio.sleep(1)
        await bot.send_message(call.message.chat.id, '...—Ç–∞–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é')
        await asyncio.sleep(2)
        await bot.send_message(call.message.chat.id, '–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                               reply_markup=markups(bar='–ü—Ä–æ–¥–æ–ª–∂–∏–º üòà', go2='–•–≤–∞—Ç–∏—Ç üòá'))

    if warning[user_id] % 5 == 0:
        await danger(warning[user_id])

quest_info = {}
userid_films = {}
drivers_dict = {}
random_film_byid = {}
warning = {}
result = {}
rand_coc = {}
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    go = types.InlineKeyboardButton(text='–ù—É –¥–∞–≤–∞–π üòÉ', callback_data='go')
    markup.add(go)
    skull = await bot.send_message(chat_id=message.chat.id, text='‚ï±‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ï≤‚ï±‚ñî‚ñî‚ñî‚ñî‚ñî‚ï≤')

    loading = ['‚ï±‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ï≤‚ï±‚ñî‚ñî‚ñî‚ñî‚ñî‚ï≤', '‚ñè‚ïÆ‚ï≠‚îà‚îà‚ïÆ‚ï≠‚îà‚ïÆ‚ñè‚ï≠‚ïÆ‚îà‚ï≠‚ïÆ‚ñï', '‚ñè‚îä‚ï±‚ñî‚ñâ‚îä‚ï±‚ñî‚ñâ‚ñè‚ñä‚îÉ‚ñï‚ñã‚îÉ‚ñï', '‚ñè‚ïØ‚ï≤‚ñÇ‚ï±‚îä‚ï≤‚ñÇ‚ï±‚ñè‚ñî‚ñÖ‚îà‚ñî‚ñî‚ñï', '‚ï≤‚ï≠‚î≥‚î≥‚ïÆ‚ñï‚ñã‚ï≠‚ï±‚ï≤‚î≥‚î≥‚î≥‚î´‚ñÇ‚ï±',
               '‚îà‚ñî‚ñè‚î£‚î≥‚î≥‚î≥‚î≥‚ñè‚ñï‚îª‚îª‚îª‚ïØ‚ñè‚îà', '‚îà‚îà‚ñè‚ï∞‚îª‚îª‚îª‚îª‚ñè‚ñï‚ñÇ‚ñÇ‚ñÇ‚ï±‚îà‚îà', '‚îà‚îà‚ï≤‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñè‚îà‚îà‚îà‚îà‚îà‚îà‚îà', '']
    count = 1
    new_text = loading[0] + '\n' + loading[1]
    for i in range(23):
        await asyncio.sleep(0.15)
        await bot.edit_message_text(chat_id=message.chat.id, text=new_text, message_id=skull.message_id)
        if i == 22:
            await asyncio.sleep(0.2)
            await bot.edit_message_text(reply_markup=markup, chat_id=message.chat.id,
                                        text=new_text + '\n' + '–°–∞–ª—é—Ç! –ü–æ–≤–µ—Å–µ–ª–∏–º—Å—è?', message_id=skull.message_id)
        count += 1
        new_text += '\n' + loading[count]
        if count == 8:
            count = 0
            new_text = loading[0]


@dp.callback_query_handler()
async def callback_inline(call: types.CallbackQuery):
    if call.data == 'go':
        markup = types.InlineKeyboardMarkup()
        film_recom = types.InlineKeyboardButton(text='–ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º üì∫', callback_data='film_recom')
        coctail_recom = types.InlineKeyboardButton(text='–ë–∞—Ä-–±–æ—Ç üç∏', callback_data='bar')
        quest_recom = types.InlineKeyboardButton(text='–†–∞–∑–æ–º–Ω—ë–º –º–æ–∑–≥–∏ üí°', callback_data='quest_recom')
        art_quest = types.InlineKeyboardButton(text='–ê—Ä—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ üé®', callback_data='art_quest')
        duck = types.InlineKeyboardButton(text='–•–æ—á—É –≥–∏—Ñ–∫—É —Å —É—Ç–æ—á–∫–æ–π! ü¶Ü', callback_data='duck')
        but_list = [duck, art_quest, quest_recom, coctail_recom, film_recom]
        await asyncio.sleep(0.5)
        mes = await call.message.answer('–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?', reply_markup=markup)
        for i in range(5):
            await asyncio.sleep(0.5)
            markup.add(but_list.pop())
            await bot.edit_message_reply_markup(call.message.chat.id, mes.message_id, reply_markup=markup)

    elif call.data == 'go2':
        markup = types.InlineKeyboardMarkup()
        film_recom = types.InlineKeyboardButton(text='–ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º üì∫', callback_data='film_recom')
        quest_recom = types.InlineKeyboardButton(text='–†–∞–∑–æ–º–Ω—ë–º –º–æ–∑–≥–∏ üí°', callback_data='quest_recom')
        art_quest = types.InlineKeyboardButton(text='–ê—Ä—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ üé®', callback_data='art_quest')
        duck = types.InlineKeyboardButton(text='–•–æ—á—É –≥–∏—Ñ–∫—É —Å —É—Ç–æ—á–∫–æ–π! ü¶Ü', callback_data='duck')
        but_list = [duck, art_quest, quest_recom, film_recom]
        await asyncio.sleep(0.5)
        mes = await call.message.answer('–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?', reply_markup=markup)
        for i in range(4):
            await asyncio.sleep(0.5)
            markup.add(but_list.pop())
            await bot.edit_message_reply_markup(call.message.chat.id, mes.message_id, reply_markup=markup)

    # –£–¢–û–ß–ö–ê:)
    elif call.data == 'duck':
        await bot.send_message(call.message.chat.id, '–°–∫–∏–Ω—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ—ë –≥–∏—Ñ–∫—É')

        @dp.message_handler(content_types=['photo'])
        async def get_photo(message: types.Message):
            await message.photo[-1].download(destination_file=('E:\OVERONE\Final project\photos\gettedimg.jpg'))
            async def load():
                coffe = ['‚ô•', '‚ô™)', '(‚ô´', '‚ù§Ô∏è )']
                coffe_mes = await bot.send_message(call.message.chat.id, '‚ñà‚ñà∆Ü')
                coffe_id = coffe_mes.message_id
                anime = '‚ñà‚ñà∆Ü'
                for i in range(12):
                    await asyncio.sleep(0.18)
                    anime = coffe.pop() + '\n' + anime
                    await bot.edit_message_text(anime, call.message.chat.id, coffe_id)
                    if i == 11:
                        break
                    elif len(coffe) == 0:
                        await asyncio.sleep(0.18)
                        anime = '‚ñà‚ñà∆Ü'
                        await bot.edit_message_text(anime, call.message.chat.id, coffe_id)
                        coffe = ['‚ô•', '‚ô™)', '(‚ô´', '‚ù§Ô∏è )']
            await asyncio.gather(load(),photo_to_gif_with_duck('E:\OVERONE\Final project\photos\gettedimg.jpg'))
            gifka = await bot.send_document(message.chat.id, open('gif/duck.gif', 'rb'), disable_content_type_detection=True)
            await bot.delete_message(message.chat.id, gifka.message_id-1)
            await bot.delete_message(message.chat.id, gifka.message_id-2)
            await bot.delete_message(message.chat.id, gifka.message_id-3)

    # –í–û–ü–†–û–° –ò–ó –ë–ê–ó–´ "–ß–¢–û? –ì–î–ï? –ö–û–ì–î–ê?"
    elif call.data == 'quest_recom':
        user_id = call.from_user.id
        try:
            driver = drivers_dict[user_id]
            driver.refresh()
            try:
                if quest_info[user_id] == 0:
                    pass
            except:
                quest_info[user_id] = 1
        except:
            drivers_dict[user_id] = webdriver.Chrome(options=options)
            driver = drivers_dict[user_id]
            quest_info[user_id] = 1
        if quest_info[user_id] == 1:
            await bot.send_message(call.message.chat.id,
                                   '<em>–£ —Ç–µ–±—è 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n–ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ç–∞–π–º–µ—Ä</em>',
                                   parse_mode='HTML')
            quest_info[user_id] = 0
        driver.get(f'http://db.chgk.net/random/answers/types1/{random.choice(range(1, 842662771))}')
        rand_quest = driver.find_element(By.CLASS_NAME, 'random_question').text.split("–û—Ç–≤–µ—Ç:")[0].split("–í–æ–ø—Ä–æ—Å 1:")[
            1].strip(' \n')

        right_answer = \
        driver.find_element(By.CLASS_NAME, 'random_question').text.split("–í–æ–ø—Ä–æ—Å 2")[0].split("–û—Ç–≤–µ—Ç:")[1].split(
            '–ò—Å—Ç–æ—á–Ω–∏–∫(–∏):')[0].strip(' ')
        right_answer2 = right_answer.split('–ò—Å—Ç–æ—á–Ω–∏–∫:')[0].strip(' ')
        right_answer3 = right_answer2.split('–ê–≤—Ç–æ—Ä(—ã):')[0].strip(' ')
        right_answer4 = right_answer3.split('–ê–≤—Ç–æ—Ä:')[0].strip(' ')
        await bot.send_message(call.message.chat.id, f'{rand_quest}')
        await asyncio.sleep(10)
        answer = await bot.send_message(call.message.chat.id,
                                        f'<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</b>:\n<tg-spoiler>{right_answer4}</tg-spoiler>',
                                        parse_mode='HTML')
        await asyncio.sleep(1)
        global marka
        marka = types.InlineKeyboardMarkup()
        go = types.InlineKeyboardButton(text='üîô', callback_data='go')
        more = types.InlineKeyboardButton(text='–ï—â—ë!', callback_data='quest_recom')
        marka.add(go, more)
        timer = await bot.send_message(call.message.chat.id, '‚ÄºÔ∏è –£ —Ç–µ–±—è 60 —Å–µ–∫—É–Ω–¥ ‚ÄºÔ∏è', reply_markup=marka)
        time_list = ['üîü', '9Ô∏è‚É£', 'üé±', '7Ô∏è‚É£', '6Ô∏è‚É£', 'ü§ö', '4Ô∏è‚É£', '3Ô∏è‚É£', '‚úåÔ∏è', '1Ô∏è‚É£']
        seconds = 60
        count = 0
        while True:
            await asyncio.sleep(1)
            seconds -= 1
            if seconds <= 10:
                if seconds == 0:
                    await bot.edit_message_text(f'<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</b>:\n{right_answer4}', call.message.chat.id,
                                                message_id=answer.message_id, parse_mode='HTML')
                    await bot.edit_message_text('‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è –í–†–ï–ú–Ø –í–´–®–õ–û ‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è', call.message.chat.id,
                                                message_id=timer.message_id, reply_markup=marka)
                    break
                else:
                    await bot.edit_message_text(f'‚ÄºÔ∏è –£ —Ç–µ–±—è {time_list[count]} —Å–µ–∫—É–Ω–¥ ‚ÄºÔ∏è', call.message.chat.id,
                                                message_id=timer.message_id, reply_markup=marka)
                count += 1
            else:
                await bot.edit_message_text(f'‚ÄºÔ∏è –£ —Ç–µ–±—è {seconds} —Å–µ–∫—É–Ω–¥ ‚ÄºÔ∏è', call.message.chat.id,
                                            message_id=timer.message_id, reply_markup=marka)

    # –ê–†–¢-–í–ò–ö–¢–û–†–ò–ù–ê
    elif call.data == 'art_quest':
        while True:
            artist_list = [i for i in os.listdir('E:/Art')]
            global artist1
            artist1 = artist_list.pop(random.choice(range(0, len(artist_list))))
            artist2 = artist_list.pop(random.choice(range(0, len(artist_list))))
            artist3 = artist_list.pop(random.choice(range(0, len(artist_list))))
            artist4 = artist_list.pop(random.choice(range(0, len(artist_list))))
            artwork_list = [i for i in os.listdir(f'E:/Art/{artist1}')]
            artwork = artwork_list.pop(random.choice(range(0, len(artwork_list))))
            if os.path.getsize(f'E:/Art/{artist1}/{artwork}') > 10485760:
                continue
            else:
                global image
                image = open(f'E:/Art/{artist1}/{artwork}', 'rb')
                break
        mkp = types.InlineKeyboardMarkup(row_width=2)
        butt1 = types.InlineKeyboardButton(text=f'{artist1}', callback_data='artist1')
        butt2 = types.InlineKeyboardButton(text=f'{artist2}', callback_data='artist2')
        butt3 = types.InlineKeyboardButton(text=f'{artist3}', callback_data='artist3')
        butt4 = types.InlineKeyboardButton(text=f'{artist4}', callback_data='artist4')
        butt_set = set()
        butt_set.add(butt1), butt_set.add(butt2), butt_set.add(butt3), butt_set.add(butt4)
        butt_list = list(butt_set)
        mkp.add(butt_list[0], butt_list[1], butt_list[2], butt_list[3])
        await bot.send_photo(call.message.chat.id, image, '–ö—Ç–æ –∞–≤—Ç–æ—Ä —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω—ã?', reply_markup=mkp)
        image.close()
    if call.data == 'artist1':
        markup = types.InlineKeyboardMarkup()
        go = types.InlineKeyboardButton(text='üîô', callback_data='go')
        more = types.InlineKeyboardButton(text='–ï—â—ë!', callback_data='art_quest')
        markup.add(go, more)
        try:
            global win_id
            win = await bot.copy_message(call.message.chat.id, from_chat_id=call.message.chat.id, message_id=win_id)
            win_id = win.message_id
        except:
            win = await bot.send_sticker(call.message.chat.id, open('Win.tgs', 'rb'))
            win_id = win.message_id
        await asyncio.sleep(1)
        await bot.send_message(call.message.chat.id, '–ë–∏–Ω–≥–æ!')
        await asyncio.sleep(1)
        await bot.send_message(call.message.chat.id, '–ß—Ç–æ –¥–∞–ª—å—à–µ', reply_markup=markup)
    elif call.data == 'artist2' or call.data == 'artist3' or call.data == 'artist4':
        markup = types.InlineKeyboardMarkup()
        go = types.InlineKeyboardButton(text='üîô', callback_data='go')
        more = types.InlineKeyboardButton(text='–ï—â—ë!', callback_data='art_quest')
        markup.add(go, more)
        try:
            global scream_id
            scream = await bot.copy_message(call.message.chat.id, from_chat_id=call.message.chat.id,
                                            message_id=scream_id)
            scream_id = scream.message_id
        except:
            scream = await bot.send_sticker(call.message.chat.id, open('Scream.tgs', 'rb'))
            scream_id = scream.message_id
        await asyncio.sleep(1)
        await bot.send_message(call.message.chat.id, f'–ù–µ—Ç, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —ç—Ç–æ {artist1}')
        await asyncio.sleep(1)
        await bot.send_message(call.message.chat.id, '–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=markup)

    # –†–ï–ö–û–ú–ú–ï–ù–î–¶–ò–Ø –•–û–†–û–®–ï–ì–û –§–ò–õ–¨–ú–ê, –ö–û–¢–û–†–´–ô –ù–ï –°–ú–û–¢–†–ï–õ
    elif call.data == 'film_recom':
        user_id = call.from_user.id

        load_mes = await bot.send_message(call.message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 0%')
        load_id = load_mes.message_id
        if userid_films == {}:
            userid_films[user_id] = []
        if len(userid_films[user_id]) == 0:
            best_films = []
            try:
                drivers_dict[user_id].get(f'https://kritikanstvo.ru/top/movies/best/2021-2023/start/0/')
            except:
                drivers_dict[user_id] = webdriver.Chrome(options=options)
                drivers_dict[user_id].get(f'https://kritikanstvo.ru/top/movies/best/2021-2023/start/0/')
            await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 10%', call.message.chat.id, load_id)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 20%', call.message.chat.id, load_id)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            drivers_dict[user_id].find_element(By.CLASS_NAME, 'pseudolink').click()
            await asyncio.sleep(0.5)
            # for i in range(0, 60, 10):
            #     drivers_dict[user_id].get(f'https://kritikanstvo.ru/top/movies/best/2021-2023/start/{i}/')
            #     if i == 30:
            elements = drivers_dict[user_id].find_elements(By.TAG_NAME, 'h2')
            for j in elements:
                best_films.append(j.text)
            await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 30%', call.message.chat.id, load_id)
            # —É–±–∏—Ä–∞–µ–º –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
            base_list = []
            try:
                with sqlite3.connect('films_base.db') as con:
                    cur = con.cursor()
                    table_name = f'films{user_id}'
                    cur.execute(f"""SELECT films_list FROM {table_name}""")
                    con.commit()
                    result_list = cur.fetchall()
                    for i in result_list:
                        base_list.append(i[0])
            except:
                pass
            await asyncio.sleep(0.5)
            await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 40%', call.message.chat.id, load_id)
            for i in best_films:
                if i not in base_list:
                    userid_films[user_id].append(i)
            try:
                while True:
                    userid_films[user_id].remove('')
            except ValueError:
                pass
        random_film = userid_films[user_id].pop(random.choice(range(0, len(userid_films[user_id]))))
        random_film_byid[user_id] = random_film
        try:
            drivers_dict[user_id].get('https://kritikanstvo.ru/top/movies/best/2021-2023/start/0/')
        except:
            drivers_dict[user_id] = webdriver.Chrome(options=options)
            drivers_dict[user_id].get('https://kritikanstvo.ru/top/movies/best/2021-2023/start/0/')
        await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí 50%', call.message.chat.id, load_id)
        drivers_dict[user_id].find_element(By.NAME, 's').send_keys(random_film)
        drivers_dict[user_id].find_element(By.NAME, 's').submit()
        drivers_dict[user_id].find_element(By.CLASS_NAME, 'cover').click()
        await asyncio.sleep(0.5)
        await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí 60%', call.message.chat.id, load_id)
        photo_url = drivers_dict[user_id].find_elements(By.CLASS_NAME, 'gallery_common')[0].get_attribute('href')
        try:
            photo_url2 = drivers_dict[user_id].find_elements(By.CLASS_NAME, 'gallery_common')[1].get_attribute('href')
        except:
            photo_url2 = drivers_dict[user_id].find_elements(By.CLASS_NAME, 'gallery_common')[0].get_attribute('href')
        year_search_list = drivers_dict[user_id].find_element(By.CLASS_NAME, 'page_item_info').find_elements(
            By.TAG_NAME, 'p')
        year = min([re.search(r'\d{4}', i.text)[0] for i in year_search_list])
        try:
            story = drivers_dict[user_id].find_element(By.CLASS_NAME, 'page_item_story').text
        except:
            story = 0
        await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí 70%', call.message.chat.id, load_id)
        drivers_dict[user_id].get('http://hdrezka.co/')
        await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí 80%', call.message.chat.id, load_id)
        drivers_dict[user_id].find_element(By.CLASS_NAME, 'b-search__field').send_keys(f'{random_film} {year}')
        drivers_dict[user_id].find_element(By.CLASS_NAME, 'b-search__field').submit()
        for i in drivers_dict[user_id].find_elements(By.CLASS_NAME, 'b-content__inline_item'):
            if i.find_element(By.CLASS_NAME, 'entity').text == '–§–∏–ª—å–º' or i.find_element(By.CLASS_NAME,
                                                                                         'entity').text == '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º':
                i.click()
                break
        film_page = drivers_dict[user_id].current_url
        await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí 90%', call.message.chat.id, load_id)
        await asyncio.sleep(0.5)
        reply_markup = markups(trailer='–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä üéû')
        reply_markup.add(InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º üìΩ', film_page))
        reply_markup.add(InlineKeyboardButton('–£–∂–µ —Å–º–æ—Ç—Ä–µ–ª', callback_data='already'),
                         InlineKeyboardButton('–ï—â—ë', callback_data='film_recom'))
        reply_markup.add(InlineKeyboardButton('üîô', callback_data='go'))
        if story == 0:
            story2 = drivers_dict[user_id].find_element(By.CLASS_NAME, 'b-post__description_text').text
            await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%', call.message.chat.id, load_id)
            try:
                await asyncio.sleep(0.5)
                result[user_id] = await bot.send_photo(call.message.chat.id, photo_url,
                                                       f'{random_film.upper()} ({year})\n\n{story2}',
                                                       reply_markup=reply_markup)
            except:
                result[user_id] = await bot.send_photo(call.message.chat.id, photo_url2,
                                                       f'{random_film.upper()} ({year})\n\n{story2}',
                                                       reply_markup=reply_markup)

        else:
            await asyncio.sleep(0.5)
            await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%', call.message.chat.id, load_id)
            try:
                result[user_id] = await bot.send_photo(call.message.chat.id, photo_url,
                                                   f'{random_film.upper()} ({year})\n\n{story}',
                                                   reply_markup=reply_markup)
            except:
                result[user_id] = await bot.send_photo(call.message.chat.id, photo_url2,
                                                       f'{random_film.upper()} ({year})\n\n{story}',
                                                       reply_markup=reply_markup)
        await asyncio.sleep(0.5)
        await bot.delete_message(call.message.chat.id, load_id)

    if call.data == 'trailer':
        user_id = call.from_user.id
        try:
            rezka_link = WebDriverWait(drivers_dict[user_id], 7).until(
                EC.presence_of_element_located((By.CLASS_NAME, "b-sidelinks__text")))
            rezka_link.click()
            trailer = WebDriverWait(drivers_dict[user_id], 7).until(
                EC.presence_of_element_located((By.XPATH, '//*[@id="ps-trailer-player"]/iframe'))).get_attribute(
                'src').split('?iv_load_policy')[0].replace('youtube', 'ssyoutube')

            drivers_dict[user_id].get(trailer)
            element = WebDriverWait(drivers_dict[user_id], 6).until(
                EC.presence_of_element_located((By.XPATH, '//*[@id="sf_result"]/div/div[1]/div[2]/div[2]/div[1]/a')))
            trailer2 = element.get_attribute('href')
            await bot.send_video(call.message.chat.id, trailer2)
        except:
            drivers_dict[user_id].get('https://www.youtube.com/')
            WebDriverWait(drivers_dict[user_id], 7).until(EC.presence_of_element_located((By.NAME, 'search_query')))
            drivers_dict[user_id].find_element(By.NAME, 'search_query').send_keys(
                random_film_byid[user_id] + f' –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç—Ä–µ–π–ª–µ—Ä')
            await asyncio.sleep(1)
            drivers_dict[user_id].find_element(By.NAME, 'search_query').submit()
            WebDriverWait(drivers_dict[user_id], 7).until(EC.presence_of_element_located((By.ID, 'title-wrapper')))
            trailer_link_youtube = drivers_dict[user_id].find_element(By.XPATH,
                                                                         '/html/body/ytd-app/div[1]/ytd-page-manager/ytd-search/div[1]/ytd-two-column-search-results-renderer/div/ytd-section-list-renderer/div[2]/ytd-item-section-renderer/div[3]/ytd-video-renderer[1]/div[1]/div/div[1]/div/h3/a').get_attribute(
                'href')
            drivers_dict[user_id].get(drivers_dict[user_id].find_element(By.XPATH,
                                                                         '/html/body/ytd-app/div[1]/ytd-page-manager/ytd-search/div[1]/ytd-two-column-search-results-renderer/div/ytd-section-list-renderer/div[2]/ytd-item-section-renderer/div[3]/ytd-video-renderer[1]/div[1]/div/div[1]/div/h3/a').get_attribute(
                'href').replace('youtube', 'ssyoutube'))
            try:
                element = WebDriverWait(drivers_dict[user_id], 7).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="sf_result"]/div/div[1]/div[2]/div[2]/div[1]/a')))
                trailer2 = element.get_attribute('href')
                await bot.send_video(call.message.chat.id, trailer2)
            except:
                await bot.send_message(call.message.chat.id, trailer_link_youtube)



    elif call.data == 'already':
        user_id = call.from_user.id
        with sqlite3.connect('films_base.db') as con:
            cur = con.cursor()
            table_name = f'films{user_id}'
            cur.execute(f"""CREATE TABLE IF NOT EXISTS {table_name} (
            films_list TEXT)""")
            cur.execute(f"""INSERT INTO {table_name}(films_list) VALUES ('{random_film_byid[user_id]}')""")
        new_markup = markups(trailer='–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä üéû')
        new_markup.add(InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º üìΩ', drivers_dict[user_id].current_url))
        new_markup.add(InlineKeyboardButton('–£–∂–µ —Å–º–æ—Ç—Ä–µ–ª ‚úîÔ∏è', callback_data='already'),
                       InlineKeyboardButton('–ï—â—ë', callback_data='film_recom'))
        new_markup.add(InlineKeyboardButton('üîô', callback_data='go'))

        await bot.edit_message_reply_markup(call.message.chat.id, result[user_id].message_id, reply_markup=new_markup)
        bd = await bot.send_message(call.message.chat.id,
                                    f'–§–∏–ª—å–º "{random_film_byid[user_id]}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å—Å—è')
        await asyncio.sleep(2.5)
        await bot.delete_message(call.message.chat.id, bd.message_id)

    # –ë–ê–†-–ë–û–¢
    elif call.data == 'bar':
        await bot.send_message(call.message.chat.id, 'üåÄ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä-–±–æ—Ç!üåÄ')
        await asyncio.sleep(1)
        await bot.send_photo(call.message.chat.id, open('bar/octopus.jpg', 'rb'), reply_markup=markups(
            classic='–ö–ª–∞—Å—Å–∏–∫–∞',
            sweat='–î–ª—è –¥–µ–≤–æ—á–µ–∫',
            dead='–£–±–µ–π –º–µ–Ω—è',
            milk='MOLOKO+',
            hot='–ü–æ—â–µ–∫–æ—á–µ–º —Å–æ—Å–æ—á–∫–∏',
            rand='–†–∞–Ω–¥–æ–º',
            zoz='–ó–û–ñ',
            go='üîô'
        ))
    elif call.data == 'zoz':
        haha = await bot.send_message(call.message.chat.id, '–ü–æ—à—ë–ª –Ω–∞—Ö—É–π')
        await asyncio.sleep(0.5)
        await bot.delete_message(call.message.chat.id, haha.message_id)
        await bot.send_photo(call.message.chat.id, open('bar/shwarz2.jpg', 'rb'), '–í–∫—É—Å–Ω—è—à–∫–∏ –¥–ª—è –∑–æ–∂–Ω–∏–∫–æ–≤',
                             reply_markup=markups(dno='–ó–æ–ª–æ—Ç–æ–µ –¥–Ω–æ', basil='–ë–∞–∑–∏–ª–∏–∫–æ–≤—ã–π —É–¥–∞—Ä', blood='–ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏',
                                                  gott='–ö–∞—Ä–µ–ª–ª –ì–æ—Ç—Ç', vegan = '–î–µ–º–æ–Ω-–≤–µ–≥–∞–Ω', shmel='–®–º–µ–ª—å', bar='üîô'))
    elif call.data == 'hot':
        try:
            global rango_id
            rango = await bot.copy_message(call.message.chat.id, from_chat_id=call.message.chat.id, message_id=rango_id,
                                           caption='–ö–æ–∫—Ç–µ–π–ª–∏ –∏ —à–æ—Ç—ã —Å TABASCO¬Æ üå∂',
                                           reply_markup=markups(bojar='–ë–æ—è—Ä—Å–∫–∏–π', bojar2='–î–æ—á—å –ë–æ—è—Ä—Å–∫–æ–≥–æ',
                                                                reddog='–ö—Ä–∞—Å–Ω—ã–π –ø—ë—Å', fors='–§–æ—Ä—Å–∞–∂', dog='–°–æ–±–∞–∫–∞.—Ä—É',
                                                                reanimator='–†–µ–∞–Ω–∏–º–∞—Ç–æ—Ä',blood='–ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏', oyster='–£—Å—Ç—Ä–∏—á–Ω—ã–π —à—É—Ç–µ—Ä',
                                                                devil='–¢–µ—Å—Å–º–∞–Ω—Å–∫–∏–π –¥—å—è–≤–æ–ª', controlshot='–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª', bar='üîô'))
            rango_id = rango.message_id
        except:
            rango = await bot.send_animation(call.message.chat.id, open('bar/Rango-min.gif', 'rb'),
                                             caption='–ö–æ–∫—Ç–µ–π–ª–∏ –∏ —à–æ—Ç—ã —Å TABASCO¬Æ üå∂',
                                             reply_markup=markups(bojar='–ë–æ—è—Ä—Å–∫–∏–π', bojar2='–î–æ—á—å –ë–æ—è—Ä—Å–∫–æ–≥–æ',
                                                                  reddog='–ö—Ä–∞—Å–Ω—ã–π –ø—ë—Å', fors='–§–æ—Ä—Å–∞–∂', dog='–°–æ–±–∞–∫–∞.—Ä—É',
                                                                  reanimator='–†–µ–∞–Ω–∏–º–∞—Ç–æ—Ä', blood='–ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏', oyster='–£—Å—Ç—Ä–∏—á–Ω—ã–π —à—É—Ç–µ—Ä',
                                                                  devil='–¢–µ—Å—Å–º–∞–Ω—Å–∫–∏–π –¥—å—è–≤–æ–ª', controlshot='–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª', bar='üîô'))
            rango_id = rango.message_id
    elif call.data == 'sweat':
        await bot.send_photo(call.message.chat.id, open(f'bar/girls{random.choice(range(1, 4))}.jpg', 'rb'),
                             caption='–î–µ–≤–æ—á–∫–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è',
                             reply_markup=markups(barbi='–ë–∞—Ä–±–∏', baunty='–ë–∞—É–Ω—Ç–∏ –º–∞—Ä—Ç–∏–Ω–∏', rose='–†–æ–∑–æ–≤—ã–π —Å–∞–¥',
                                                  porn='–ü–æ—Ä–Ω–æ–∑–≤–µ–∑–¥–∞', sex='–°–µ–∫—Å –Ω–∞ –ø–ª—è–∂–µ', orgasm='–ú–æ–¥–Ω—ã–π –æ—Ä–≥–∞–∑–º',
                                                  sosok='–°–∫–æ–ª—å–∑–∫–∏–π —Å–æ—Å–æ–∫', cocumber='–î–∂–∏–Ω —Ç–æ–Ω–∏–∫ —Å –æ–≥—É—Ä—Ü–æ–º',
                                                  ledi='–ë–µ–ª–∞—è –ª–µ–¥–∏', blur='–û–±–ª–∞–∫–æ –¥—ã–º–∞', bell='–ë–µ–ª–ª–∏–Ω–∏',
                                                  mimoza='–ú–∏–º–æ–∑–∞', bar='üîô'))
    elif call.data == 'dead':
        await bot.send_message(call.message.chat.id,
                               '<em>–ß—Ç–æ —Ç–µ–±—è –Ω–µ —É–±–∏–≤–∞–µ—Ç, –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –ø—å—è–Ω–µ–µ</em> \n\n¬© –¢–∏–±–µ—Ç—Å–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å',
                               parse_mode='HTML')
        await asyncio.sleep(2.5)
        await bot.send_photo(call.message.chat.id, open('bar/–ì–æ—Ä—å–∫–æ–µ –ø–æ–π–ª–æ, –ê–¥—Ä–∏–∞–Ω –ë—Ä–∞—É—ç—Ä, 1631.jpg', 'rb'),
                             reply_markup=markups(hiro='–•–∏—Ä–æ—Å–∏–º–∞', aurora='–°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ', sky='–ù–µ–±–µ—Å–∞',
                                                  bum='–¢–µ–∫–∏–ª–∞ –±—É–º', negr='–ù–µ–≥—Ä–æ–Ω–∏', green='–ó–µ–ª—ë–Ω–∞—è —Ñ–µ—è',
                                                  blackrus='–ß—ë—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π', french='–§—Ä–µ–Ω—á 75', martin='–í–æ–¥–∫–∞ –º–∞—Ä—Ç–∏–Ω–∏',
                                                  controlshot='–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª', bar='üîô'))
    elif call.data == 'milk':
        try:
            global orange_id
            orange = await bot.copy_message(call.message.chat.id, from_chat_id=call.message.chat.id,
                                            message_id=orange_id,
                                            reply_markup=markups(pina='–ü–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', orgasm='–ú–æ–¥–Ω—ã–π –æ—Ä–≥–∞–∑–º', tom='–¢–æ–º –∏ –î–∂–µ—Ä—Ä–∏',
                                                                 brendi='–ë—Ä–µ–Ω–¥–∏ –∏ –∫–æ–ª–∞', amigo='–ê–º–∏–≥–æ',
                                                                 belrus='–ë–µ–ª—ã–π —Ä—É—Å—Å–∫–∏–π', cherry='–ó–∏–º–Ω—è—è –≤–∏—à–Ω—è',
                                                                 shashki='–ê–ª–∫–æ-—à–∞—à–∫–∏', bar='üîô'))
            orange_id = orange.message_id
        except:
            orange = await bot.send_animation(call.message.chat.id, open('bar/Clockwork_intro.mp4', 'rb'),
                                              caption='–ö–æ–∫—Ç–µ–π–ª–∏ —Å –º–æ–ª–æ–∫–æ–º/—Å–ª–∏–≤–∫–∞–º–∏ ü•õ',
                                              reply_markup=markups(pina='–ü–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', orgasm='–ú–æ–¥–Ω—ã–π –æ—Ä–≥–∞–∑–º', belrus='–ë–µ–ª—ã–π —Ä—É—Å—Å–∫–∏–π',
                                                                   tom='–¢–æ–º –∏ –î–∂–µ—Ä—Ä–∏', brendi='–ë—Ä–µ–Ω–¥–∏ –∏ –∫–æ–ª–∞',
                                                                   amigo='–ê–º–∏–≥–æ', cherry='–ó–∏–º–Ω—è—è –≤–∏—à–Ω—è',
                                                                   shashki='–ê–ª–∫–æ-—à–∞—à–∫–∏', bar='üîô'))
            orange_id = orange.message_id

    elif call.data == 'rand':
        try:
            global roulette
            global rand_mes
            await bot.delete_message(call.message.chat.id, rand_mes.message_id)
            await bot.delete_message(call.message.chat.id, roulette.message_id)
            roulette = await bot.copy_message(call.message.chat.id,call.message.chat.id, roulette.message_id)

            user_id = call.from_user.id
            coc_list = [values for values in bar_dict.values()]
            await asyncio.sleep(1)
            rand_mes = await bot.send_message(call.message.chat.id,
                                              coc_list.pop(random.choice(range(len(coc_list) - 1))))
            for i in range(10):
                if i < 9:
                    await asyncio.sleep(0.25)
                    await bot.edit_message_text(coc_list.pop(random.choice(range(len(coc_list) - 1))),
                                                call.message.chat.id, rand_mes.message_id)

                elif i == 9:
                    await asyncio.sleep(0.25)
                    rand_coc[user_id] = coc_list.pop(random.choice(range(len(coc_list) - 1)))
                    await bot.edit_message_text(rand_coc[user_id], call.message.chat.id, rand_mes.message_id)
                    await asyncio.sleep(0.5)
                    await bot.edit_message_reply_markup(call.message.chat.id, rand_mes.message_id,
                                                        reply_markup=markups(confirm='‚òëÔ∏è', rand='üåÄ', bar='üîô'))
                    await asyncio.sleep(0.5)
        except:
            user_id = call.from_user.id
            coc_list = [values for values in bar_dict.values()]
            roulette = await bot.send_document(call.message.chat.id, open('bar/roulette.gif', 'rb'), disable_content_type_detection=True)
            await asyncio.sleep(0.5)
            rand_mes = await bot.send_message(call.message.chat.id, coc_list.pop(random.choice(range(len(coc_list)-1))))
            for i in range(10):
                if i < 9:
                    await asyncio.sleep(0.25)
                    await bot.edit_message_text(coc_list.pop(random.choice(range(len(coc_list)-1))), call.message.chat.id, rand_mes.message_id)

                elif i == 9:
                    await asyncio.sleep(0.25)
                    rand_coc[user_id] = coc_list.pop(random.choice(range(len(coc_list)-1)))
                    await bot.edit_message_text(rand_coc[user_id], call.message.chat.id, rand_mes.message_id)
                    await asyncio.sleep(0.5)
                    await bot.edit_message_reply_markup(call.message.chat.id, rand_mes.message_id, reply_markup=markups(confirm = '‚òëÔ∏è', rand = 'üåÄ', bar ='üîô'))
                    await asyncio.sleep(0.5)

    elif call.data == 'confirm':
        user_id = call.from_user.id
        await coc(rand_coc[user_id], call)

    elif call.data == 'classic':
        rm = types.InlineKeyboardMarkup()
        editmes = await bot.send_photo(call.message.chat.id, open('bar/coc.jpg', 'rb'), reply_markup=rm)
        buttons = [types.InlineKeyboardButton(text='–ö–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω', callback_data='cosmo'),
                   types.InlineKeyboardButton(text='–î–∞–π–∫–∏—Ä–∏', callback_data='daiq'),
                   types.InlineKeyboardButton(text='–ê–ø–µ—Ä–æ–ª—å –®–ø—Ä–∏—Ü', callback_data='spritz'),
                   types.InlineKeyboardButton(text='–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω', callback_data='manh'),
                   types.InlineKeyboardButton(text='–ú–∞–π —Ç–∞–π', callback_data='maj'),
                   types.InlineKeyboardButton(text='–ù–µ–≥—Ä–æ–Ω–∏', callback_data='negr'),
                   types.InlineKeyboardButton(text='–ú–æ—Ö–∏—Ç–æ', callback_data='moh'),
                   types.InlineKeyboardButton(text='–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π —Å–ª–∏–Ω–≥', callback_data='sling'),
                   types.InlineKeyboardButton(text='–¢–µ–∫–∏–ª–∞ —Å–∞–Ω—Ä–∞–π–∑', callback_data='sunrise'),
                   types.InlineKeyboardButton(text='–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data='marg'),
                   types.InlineKeyboardButton(text='–ö—É–±–∞ –ª–∏–±—Ä–µ', callback_data='libre'),
                   types.InlineKeyboardButton(text='–ë-52', callback_data='b52'),
                   types.InlineKeyboardButton(text='–õ–æ–Ω–≥ –∞–π–ª–µ–Ω–¥ –∞–π—Å —Ç–∏', callback_data='long'),
                   types.InlineKeyboardButton(text='–í–∏—Å–∫–∏ —Å–∞—É—ç—Ä', callback_data='ws')]
        for i in range(int(len(buttons) / 2 + 1)):
            await asyncio.sleep(0.5)
            if len(buttons) == 0:
                rm.add(types.InlineKeyboardButton(text='üîô', callback_data='bar'))
            else:
                rm.add(buttons.pop(), buttons.pop())
            await bot.edit_message_reply_markup(call.message.chat.id, editmes.message_id, reply_markup=rm)

    elif call.data in bar_dict:
        await coc(bar_dict[call.data], call)


executor.start_polling(dispatcher=dp, skip_updates=True)
